#include "AES.hpp"
#include <iostream>
#include <fstream>
#include <string>
#include <cstring>
using namespace std;
char RoundKeys[11*16] = {0};
char* key[16] = {0};
int block_counter = 0;


static const uint8_t sbox[256] =   {
  //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
 
static const uint8_t rsbox[256] =
{ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

unsigned char rcon[256] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d};

char* ESubByts(char* input){
	char* output;

	output = new char [16];

	for(int i=0; i<16; ++i){

		output[i] = input[i];
	}
	return output;
}

char* DSubByts(char* input){
	char* output;
	output = new char [16];

	for(int i=0; i<16; ++i){

		output[i] = input[i];
	}
	return output;
}

// note to self, use mult table lookup, find tables on wiki page

char GMul(char a, char b) { // Galois Field (256) Multiplication of two Bytes
   char p = 0;
   char counter;
   char hi_bit_set;
   for (counter = 0; counter < 8; counter++) {
      if ((b & 1) != 0) {
         p ^= a;
      }
      hi_bit_set = (char) (a & 0x80);
      a <<= 1;
      if (hi_bit_set != 0) {
         a ^= 0x1b; /* x^8 + x^4 + x^3 + x + 1 */
      }
      b >>= 1;
   }
   return p;
}


char* EMixColumns(char* input){
	char* output;
	output = new char [16];
	int i;
	i = 0;

	while(i<4){
		output[i] =  (GMul(input[i],0x02)) ^ (GMul(input[i+4],0x03)) ^ input[i+8] ^ input[i+12];
		output[i+4] = input[i] ^ (GMul(input[i+4],0x02)) ^ (GMul(input[i+8],0x03)) ^ input[i+12];
		output[i+8] = input[i] ^  input[i+4] ^ (GMul(input[i+8],0x02)) ^ (GMul(input[i+12],0x03));
		output[i+12] = (GMul(input[i],0x03)) ^ input[i+4] ^ input[i+8] ^   (GMul(input[i+12],0x02));
		i++;
	}

	return output;
}

char* DMixColumns(char* input){
	char* output;
	output = new char [16];
	int i;
	i= 0;

	while(i<4){
		output[i] =    (GMul(input[i],0x0e)) ^ (GMul(input[i+4],0x0b)) ^ (GMul(input[i+8],0x0d)) ^ (GMul(input[i+12],0x09));
		output[i+4] =  (GMul(input[i],0x09)) ^ (GMul(input[i+4],0x0e)) ^ (GMul(input[i+8],0x0b)) ^ (GMul(input[i+12],0x0d));
		output[i+8] =  (GMul(input[i],0x0d)) ^ (GMul(input[i+4],0x09)) ^ (GMul(input[i+8],0x0e)) ^ (GMul(input[i+12],0x0b));
		output[i+12] = (GMul(input[i],0x0b)) ^ (GMul(input[i+4],0x0d)) ^ (GMul(input[i+8],0x09)) ^ (GMul(input[i+12],0x0e));
		i++;
	}

	return output;
}

uint32_t Rotword(uint32_t input){
	uint32_t output;
	uint8_t temp;
	uint8_t temp2;

	temp = (input & 0xff000000) >> 24;
	temp2 = input >> 8;
	output = (temp & temp2);

	return output;
}

uint8_t* WordToChars(uint32_t input){
	uint8_t* output = new uint8_t[4];

	output[0] = (input & 0xFF);
	output[1] = ((input>>8) & 0xFF);
	output[2] = ((input>>16) & 0xFF);
	output[3] = ((input>>24) & 0xFF);

	return output;
}

uint32_t word(uint8_t in1,uint8_t in2,uint8_t in3,uint8_t in4){

	return (in1 << 24) | (in2 << 16) | (in3 << 8) | in4;
}

uint32_t SubWord(uint32_t input){
	uint32_t output;
	uint8_t* temp = new uint8_t[4];
	int i = 0;
	temp = WordToChars(input);

	while(i < 4){
		output = word(sbox[temp[4*i]],sbox[temp[4*i+1]],sbox[temp[4*i+2]],sbox[temp[4*i+3]]);
		i++;
	}

	return output;
}

void KeyExpansion(char* input){
	uint32_t temp;
	uint32_t* w = new uint32_t [4*11];
	uint8_t* temp2;

	for(int i=0;i < 4;i++){
		w[i] = word(input[4*i],input[4*i+1],input[4*i+2],input[4*i+3]);
	}

	for(int j=4;j < 44;j++){
		temp = w[j-1];

		if(j%4 == 0){
			temp = (SubWord(Rotword(temp)) ^ rcon[j/4]);
		}

		w[j] = w[j-4] ^ temp;
	}

	for(int i=0; i<44; i++){
			//cout << "testing KeyExpansion" << "\n";
			temp2 = WordToChars(w[i]);
			RoundKeys[4*i] = temp2[0];
			RoundKeys[4*i+1] = temp2[1];
			RoundKeys[4*i+2] = temp2[2];
			RoundKeys[4*i+3] = temp2[3];
		
	}
	return;
}

char* GetKey(int i){
	char* key = new char[16];
	int j = 0;

	while(j < 16){
		key[j] = RoundKeys[16*i+j];
		j++;
	}

	return key;
}

char* DShiftRow(char* input){
	char *shiftedMemblock;
	shiftedMemblock = new char [16];

	// shift of first row, essentially just a copy

	shiftedMemblock[0] = input[0];
	shiftedMemblock[1] = input[1];
	shiftedMemblock[2] = input[2];
	shiftedMemblock[3] = input[3];

	// shift of second row

	shiftedMemblock[4] = input[7];
	shiftedMemblock[5] = input[4];
	shiftedMemblock[6] = input[5];
	shiftedMemblock[7] = input[6];

	//shift of third row

	shiftedMemblock[8] = input[10];
	shiftedMemblock[9] = input[11];
	shiftedMemblock[10] = input[8];
	shiftedMemblock[11] = input[9];

	//shift of fourth row

	shiftedMemblock[12] = input[13];
	shiftedMemblock[13] = input[14];
	shiftedMemblock[14] = input[15];
	shiftedMemblock[15] = input[12];

	return shiftedMemblock;
}

char* EShiftRow(char* input){
	char *shiftedMemblock;
	shiftedMemblock = new char [16];

	// shift of first row, essentially just a copy

	shiftedMemblock[0] = input[0];
	shiftedMemblock[1] = input[1];
	shiftedMemblock[2] = input[2];
	shiftedMemblock[3] = input[3];

	// shift of second row

	shiftedMemblock[4] = input[5];
	shiftedMemblock[5] = input[6];
	shiftedMemblock[6] = input[7];
	shiftedMemblock[7] = input[4];

	//shift of third row

	shiftedMemblock[8] = input[10];
	shiftedMemblock[9] = input[11];
	shiftedMemblock[10] = input[8];
	shiftedMemblock[11] = input[9];

	//shift of fourth row

	shiftedMemblock[12] = input[15];
	shiftedMemblock[13] = input[12];
	shiftedMemblock[14] = input[13];
	shiftedMemblock[15] = input[14];

	return shiftedMemblock;
}

char* AddRoundKey(char* input, char* key){
	char* output;
	output = new char[16];
	int i;

	for(i=0; i<16; ++i){
        output[i] = (char)(input[i] ^ key[i]);
	}

	return output;
}

void printCryptBlock(char* input){
	int i;

	for(i=0; i<16; ++i){
        printf("%02X ", (unsigned char)input[i]);
	}
    printf("\n");

}

void printMemblock(char* input){
	int i = 0;
	while(i < 16){
		cout << input[i];
		i++;
	}
	cout << "\n";
	return;
}

char* Cipher(char* input, int rounds=10){
	//cout << "encrypting" << "\n";
	//printCryptBlock(input);
	char* output = new char[16];
	char* initkey = GetKey(0);
	char* tempkey;
	output = input;

	output = AddRoundKey(output,initkey);
	int i;
	for(i=1; i <= rounds-1; ++i){
		output = ESubByts(output);
		output = EShiftRow(output);
		output = EMixColumns(output);

		tempkey = GetKey(i);

		output = AddRoundKey(output,tempkey);
	}

	output = ESubByts(output);
	output = EShiftRow(output);

	tempkey = GetKey(rounds);

	output = AddRoundKey(output,tempkey);

	return output;
}

char* Decipher(char* input, int rounds=10){
	//cout << "deciphering" << "\n";
	//printCryptBlock(input);
	char* output = new char[16];
	char* initkey = GetKey(rounds);
	char* tempkey;
	output = input;

	output = AddRoundKey(output,initkey);
	int i;
	for(i=rounds-1; i >= 1 ; --i){
		output = DShiftRow(output);
		output = DSubByts(output);

		tempkey = GetKey(i);

		output = AddRoundKey(output,tempkey);
		output = DMixColumns(output);
	}

	output = DShiftRow(output);
	output = DSubByts(output);

	tempkey = GetKey(0);

	output = AddRoundKey(output,tempkey);

	return output;
}

char* CopyBlock(char* input){
	char* output = new char[16];
	for(int i=0; i<16;++i){
		output[i] = input[i];
	}
	return output;
}

int main () {

	streampos begin,end,begin2,end2;
  	char * memblock = new char [16];
  	char * Dmemblock = new char [16];
  	char * Cmemblock = new char [16];
  	char * Outblock = new char [16];
  	char * key,* key2;
  	char * IV = new char [16];
  	IV = "laladerpthisstuf"; //key of memblock size
  	char * Eprev = IV;
  	//char * Dprev = IV;
  	char * Bprev = IV;

  	ifstream infile1 ("input.txt");
  	ofstream outfile1 ("Doutput.txt");
  	ifstream infile2 ("Doutput.txt");
  	ofstream outfile2 ("output.txt");

  	key = "230853050239842+438";
  	key2 = "whyohgodwhydoihavetodothis"; //oversized key
	KeyExpansion(key2);
  	
	while(infile1.tellg() != -1){

  		infile1.read (memblock, 16);


  		memblock = AddRoundKey(memblock, Eprev);
  		Cmemblock = Cipher(memblock);
  		Eprev = Cmemblock;

  		outfile1.write(Cmemblock, 16);
 
	  	memset(memblock,0,16);
  	}
  	
  	infile1.close();
  	outfile1.close();	
  	
  	while(infile2.tellg() != -1){

  		infile2.read (memblock, 16);
  		//insures a zero padding without a block of garbage
  		if(infile2.gcount() != 0){
	
				Dmemblock = Decipher(memblock);
				Outblock = AddRoundKey(Dmemblock, Bprev); 
				Bprev = CopyBlock(memblock);
	
	  		outfile2.write (Outblock, 16);
	  	}
	  	memset(memblock,0,16);
  	}
	
  	infile2.close();
  	outfile2.close();


  	return 0;
}